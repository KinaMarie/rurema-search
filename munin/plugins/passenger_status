#!/usr/bin/env ruby
#
# Copyright (C) 2010  Kouhei Sutou <kou@clear-code.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#%# family=auto
#%# capabilities=autoconf

require 'rubygems'

mode = ARGV[0]

def passenger_status_path(gem_path)
  File.join(gem_path, "bin", "passenger-status")
end

@label = ENV["label"]
@pid_file = ENV["pid_file"]
@ruby = ENV["ruby"] || Gem.ruby
@gem_path = ((ENV["GEM_HOME"] || '').split(/:/) + Gem.path).find do |path|
  File.exist?(passenger_status_path(path))
end

def passenger_status
  if @pid_file
    unless File.readable?(@pid_file)
      return [false, "PID file isn't readable: #{@pid_file}"]
    end
    pid = File.read(@pid_file).strip
  else
    pid = nil
  end
  result = `#{@ruby} #{passenger_status_path(@gem_path)} #{pid}`
  [$?.success?, result]
end

def parse_result(result)
  sections = {}
  section = nil
  result.each_line do |line|
    case section
    when "General information"
      case line.chomp
      when /\A(\S+)\s*=\s*(\d+)\z/
        key = $1
        value = $2.to_i
        sections[section][key] = {:label => key, :value => value}
      when /\A(Waiting on global queue):\s*(\d+)\z/
        label = $1
        value = $2.to_i
        sections[section]["global_queue"] = {:label => label, :value => value}
      end
    else
      if /-+\s+(.+)\s+-+/ =~ line
        section = $1
        sections[section] = {}
      end
    end
  end
  sections
end

def config
  success, result = passenger_status
  exit(false) unless success

  if @label
    title = "Passenger: #{@label}: status"
  else
    title = "Passenger: status"
  end
  sections = parse_result(result)
  puts(<<-EOC)
graph_title #{title}
graph_category passenger
graph_info Passenger status

EOC
  sections["General information"].each do |key, attributes|
    puts("#{key}.label #{attributes[:label]}")
  end
end

def report
  success, result = passenger_status
  exit(false) unless success

  sections = parse_result(result)
  sections["General information"].each do |key, attributes|
    puts("#{key}.value #{attributes[:value]}")
  end
end

case mode
when "auto", "autoconf", "detect"
  success, result = passenger_status
  if success
    puts "yes"
    exit(true)
  else
    puts "no (#{result})"
    exit(false)
  end
when "config"
  config
else
  report
end
